#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(str(Path(__file__).parent / "src"))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from src.config import settings
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        from src.models import VKRTopic, EducationLevel
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        from src.agents import VKRTopicAgent
        print("‚úÖ –ê–≥–µ–Ω—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_models():
    """–¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from src.models import VKRTopic, EducationLevel, TopicRequest
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã
        topic = VKRTopic(
            title="–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞ –¥–ª—è –í–ö–†",
            field="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
            level=EducationLevel.BACHELOR,
            description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–µ–º—ã",
            keywords=["—Ç–µ—Å—Ç", "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"]
        )
        
        print(f"‚úÖ –¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: {topic.title}")
        print(f"   –û–±–ª–∞—Å—Ç—å: {topic.field}")
        print(f"   –£—Ä–æ–≤–µ–Ω—å: {topic.level}")
        print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {topic.keywords}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        request = TopicRequest(
            field="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
            count=3,
            level=EducationLevel.BACHELOR
        )
        
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω: {request.field}, {request.count} —Ç–µ–º")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return False

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from src.config import settings
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.default_model}")
        print(f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–±–ª–∞—Å—Ç–∏: {len(settings.supported_fields)}")
        print(f"‚úÖ –£—Ä–æ–≤–Ω–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {settings.education_levels}")
        print(f"‚úÖ –ú–∞–∫—Å–∏–º—É–º —Ç–µ–º: {settings.max_topics_per_request}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_agent_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ (–±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤)"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞...")
    
    try:
        from src.agents import VKRTopicAgent, TopicGenerationConfig
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = TopicGenerationConfig(
            field="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
            level="–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç",
            count=2
        )
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config.field}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ (–º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –Ω–∞ API –∫–ª—é—á–µ)
        try:
            agent = VKRTopicAgent()
            print("‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω (API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç)")
        except Exception as e:
            print(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω (–ø—Ä–æ–±–ª–µ–º–∞ —Å API): {e}")
            print("   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞: {e}")
        return False

def test_api_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API...")
    
    try:
        from src.api.server import app
        print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        routes = [route.path for route in app.routes]
        expected_routes = ["/", "/health", "/generate-topics", "/topics", "/stats", "/fields"]
        
        for route in expected_routes:
            if route in routes:
                print(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç {route} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç {route} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ü–†–û–°–¢–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–†–í–ò–°–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–ï–ú –í–ö–†")
    print("=" * 60)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö", test_models),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞", test_agent_creation),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ API", test_api_structure)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*40}")
        print(f"üî¨ {test_name}")
        print(f"{'='*40}")
        
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print(f"\n{'='*60}")
    print(f"üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print(f"{'='*60}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {total - passed}/{total}")
    
    if passed >= total - 1:  # –î–æ–ø—É—Å–∫–∞–µ–º –æ–¥–Ω—É –æ—à–∏–±–∫—É (API –∫–ª—é—á)
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π OpenRouter API –∫–ª—é—á")
        print("2. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: conda run python test_openrouter.py")
        print("4. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: conda run python run_openrouter.py")
        return 0
    else:
        print(f"\n‚ö†Ô∏è {total - passed} –¢–ï–°–¢–û–í –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")
        return 1

if __name__ == "__main__":
    sys.exit(main())
