#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π OpenRouter
"""

import requests
import json
import os

def check_available_models():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π OpenRouter...")
    
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get("https://openrouter.ai/api/v1/models", headers=headers)
        
        if response.status_code == 200:
            models = response.json()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(models.get('data', []))} –º–æ–¥–µ–ª–µ–π")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
            free_models = []
            llama_models = []
            
            for model in models.get('data', []):
                model_id = model.get('id', '')
                name = model.get('name', '')
                pricing = model.get('pricing', {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
                if pricing.get('prompt') == '0' and pricing.get('completion') == '0':
                    free_models.append({
                        'id': model_id,
                        'name': name,
                        'context_length': model.get('context_length', 0)
                    })
                
                # –ò—â–µ–º –º–æ–¥–µ–ª–∏ Llama
                if 'llama' in model_id.lower() or 'llama' in name.lower():
                    llama_models.append({
                        'id': model_id,
                        'name': name,
                        'context_length': model.get('context_length', 0),
                        'pricing': pricing
                    })
            
            print(f"\nüÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ ({len(free_models)}):")
            for model in free_models[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   ‚Ä¢ {model['id']}")
                print(f"     –ù–∞–∑–≤–∞–Ω–∏–µ: {model['name']}")
                print(f"     –ö–æ–Ω—Ç–µ–∫—Å—Ç: {model['context_length']} —Ç–æ–∫–µ–Ω–æ–≤")
                print()
            
            print(f"\nü¶ô –ú–æ–¥–µ–ª–∏ Llama ({len(llama_models)}):")
            for model in llama_models[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   ‚Ä¢ {model['id']}")
                print(f"     –ù–∞–∑–≤–∞–Ω–∏–µ: {model['name']}")
                print(f"     –ö–æ–Ω—Ç–µ–∫—Å—Ç: {model['context_length']} —Ç–æ–∫–µ–Ω–æ–≤")
                print(f"     –¶–µ–Ω–∞: {model['pricing']}")
                print()
            
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ª—É—á—à–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
            recommended = [
                "meta-llama/llama-3.2-3b-instruct:free",
                "meta-llama/llama-3.2-1b-instruct:free", 
                "microsoft/phi-3-mini-128k-instruct:free",
                "google/gemma-2-2b-it:free",
                "mistralai/mistral-7b-instruct:free"
            ]
            
            for rec in recommended:
                if any(rec in model['id'] for model in free_models):
                    print(f"   ‚úÖ {rec}")
                else:
                    print(f"   ‚ùå {rec} (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_model(model_id):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_id}")
    
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    data = {
        "model": model_id,
        "messages": [
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç. –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ."}
        ],
        "max_tokens": 50
    }
    
    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=data
        )
        
        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            print(f"‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"   –û—Ç–≤–µ—Ç: {content}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ú–û–î–ï–õ–ï–ô OPENROUTER")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    check_available_models()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –º–æ–¥–µ–ª—å
    test_model_id = "meta-llama/llama-3.2-3b-instruct:free"
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –º–æ–¥–µ–ª–∏...")
    if test_model(test_model_id):
        print(f"\n‚úÖ –ú–æ–¥–µ–ª—å {test_model_id} —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
    else:
        print(f"\n‚ùå –ú–æ–¥–µ–ª—å {test_model_id} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.")

if __name__ == "__main__":
    main()
