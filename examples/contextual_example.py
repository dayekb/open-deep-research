#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º –í–ö–†
"""

import requests
import json

def generate_personalized_topics():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º"""
    print("üéØ –ü–†–ò–ú–ï–† –ö–û–ù–¢–ï–ö–°–¢–ù–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–ï–ú –í–ö–†")
    print("=" * 60)
    
    base_url = "http://localhost:8000"
    
    # –ü—Ä–∏–º–µ—Ä 1: –°—Ç—É–¥–µ–Ω—Ç-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
    print("\nüë®‚Äçüíª –°—Ç—É–¥–µ–Ω—Ç-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (–≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏)")
    print("-" * 50)
    
    web_developer_request = {
        "field": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "level": "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç",
        "count": 2,
        "student_preferences": {
            "interests": ["–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"],
            "skills": ["JavaScript", "React", "Node.js", "MongoDB"],
            "career_goals": ["Full-stack Developer", "UI/UX Designer"],
            "preferred_technologies": ["React", "Vue.js", "Express", "MongoDB"],
            "work_style": "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π",
            "complexity_preference": "—Å—Ä–µ–¥–Ω—è—è"
        }
    }
    
    try:
        response = requests.post(
            f"{base_url}/generate-topics",
            json=web_developer_request,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data['topics'])} —Ç–µ–º")
            
            for i, topic in enumerate(data['topics'], 1):
                print(f"\n{i}. {topic['title']}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {topic['description']}")
                print(f"   –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {', '.join(topic['keywords'])}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –ü—Ä–∏–º–µ—Ä 2: –°—Ç—É–¥–µ–Ω—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –°—Ç—É–¥–µ–Ω—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö")
    print("-" * 50)
    
    data_analyst_request = {
        "field": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "level": "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞",
        "count": 2,
        "student_preferences": {
            "interests": ["–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
            "skills": ["Python", "R", "SQL", "Pandas", "Scikit-learn"],
            "career_goals": ["Data Scientist", "Business Analyst"],
            "preferred_technologies": ["Python", "Jupyter", "TensorFlow", "PostgreSQL"],
            "work_style": "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
            "complexity_preference": "–≤—ã—Å–æ–∫–∞—è"
        },
        "department_context": {
            "existing_topics": [
                "–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π",
                "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
            ],
            "research_directions": ["–ë–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ", "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"],
            "available_resources": ["GPU –∫–ª–∞—Å—Ç–µ—Ä", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 1TB", "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ü–û"]
        },
        "avoid_duplicates": True
    }
    
    try:
        response = requests.post(
            f"{base_url}/generate-topics",
            json=data_analyst_request,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data['topics'])} —Ç–µ–º")
            
            for i, topic in enumerate(data['topics'], 1):
                print(f"\n{i}. {topic['title']}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {topic['description']}")
                print(f"   –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è: {topic.get('methodology', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –ü—Ä–∏–º–µ—Ä 3: –°—Ç—É–¥–µ–Ω—Ç-–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–∏–∫
    print("\nüîí –°—Ç—É–¥–µ–Ω—Ç-–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–∏–∫")
    print("-" * 50)
    
    cybersecurity_request = {
        "field": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "level": "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç",
        "count": 1,
        "student_preferences": {
            "interests": ["–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "—ç—Ç–∏—á–Ω—ã–π —Ö–∞–∫–∏–Ω–≥", "–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è"],
            "skills": ["Python", "C++", "Linux", "Wireshark", "Metasploit"],
            "career_goals": ["Penetration Tester", "Security Analyst"],
            "preferred_technologies": ["Kali Linux", "Burp Suite", "Nmap", "OWASP"],
            "work_style": "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π",
            "complexity_preference": "–≤—ã—Å–æ–∫–∞—è"
        },
        "department_context": {
            "existing_topics": [
                "–ê–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
                "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—Ç–æ—Ä–∂–µ–Ω–∏–π"
            ],
            "research_directions": ["–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è"],
            "available_resources": ["–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞", "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ü–û"]
        },
        "avoid_duplicates": True
    }
    
    try:
        response = requests.post(
            f"{base_url}/generate-topics",
            json=cybersecurity_request,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data['topics'])} —Ç–µ–º")
            
            for i, topic in enumerate(data['topics'], 1):
                print(f"\n{i}. {topic['title']}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {topic['description']}")
                print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {topic.get('difficulty_level', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


if __name__ == "__main__":
    generate_personalized_topics()
