"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º –í–ö–†
"""

import requests
import json
import time


class VKRTopicClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
    
    def generate_topics(self, field: str, count: int = 5, 
                       specialization: str = None, 
                       level: str = "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç") -> dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º —á–µ—Ä–µ–∑ API"""
        url = f"{self.base_url}/generate-topics"
        
        data = {
            "field": field,
            "count": count,
            "specialization": specialization,
            "level": level,
            "include_trends": True,
            "include_methodology": True
        }
        
        response = requests.post(url, json=data)
        response.raise_for_status()
        return response.json()
    
    def search_topics(self, query: str, limit: int = 10) -> dict:
        """–ü–æ–∏—Å–∫ —Ç–µ–º —á–µ—Ä–µ–∑ API"""
        url = f"{self.base_url}/topics"
        
        params = {
            "query": query,
            "limit": limit
        }
        
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    
    def get_topic(self, topic_id: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º—ã –ø–æ ID"""
        url = f"{self.base_url}/topics/{topic_id}"
        
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        url = f"{self.base_url}/stats"
        
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    
    def get_supported_fields(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π"""
        url = f"{self.base_url}/fields"
        
        response = requests.get(url)
        response.raise_for_status()
        return response.json()


def print_topics(topics_data: dict):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ç–µ–º"""
    topics = topics_data.get("topics", [])
    total_count = topics_data.get("total_count", 0)
    generation_time = topics_data.get("generation_time", 0)
    
    print(f"\nüìö –ù–∞–π–¥–µ–Ω–æ {total_count} —Ç–µ–º (–≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_time:.2f}—Å)")
    print("=" * 60)
    
    for i, topic in enumerate(topics, 1):
        print(f"\n{i}. {topic['title']}")
        print(f"   üéì –£—Ä–æ–≤–µ–Ω—å: {topic['level']}")
        print(f"   üìñ –û–±–ª–∞—Å—Ç—å: {topic['field']}")
        if topic.get('specialization'):
            print(f"   üî¨ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {topic['specialization']}")
        if topic.get('description'):
            print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {topic['description']}")
        if topic.get('keywords'):
            print(f"   üè∑Ô∏è  –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(topic['keywords'])}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ API"""
    client = VKRTopicClient()
    
    print("üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º –í–ö–†")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
        print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞...")
        health_response = requests.get(f"{client.base_url}/health")
        if health_response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
        print("\n2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∑–Ω–∞–Ω–∏–π:")
        fields_data = client.get_supported_fields()
        print(f"   –û–±–ª–∞—Å—Ç–∏: {', '.join(fields_data['fields'])}")
        print(f"   –£—Ä–æ–≤–Ω–∏: {', '.join(fields_data['levels'])}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏
        print("\n3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ:")
        topics_data = client.generate_topics(
            field="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
            count=3,
            level="–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç"
        )
        print_topics(topics_data)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º —Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        print("\n4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º —Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π:")
        specialized_topics = client.generate_topics(
            field="–≠–∫–æ–Ω–æ–º–∏–∫–∞",
            specialization="–¶–∏—Ñ—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞",
            count=2,
            level="–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"
        )
        print_topics(specialized_topics)
        
        # –ü–æ–∏—Å–∫ —Ç–µ–º
        print("\n5. –ü–æ–∏—Å–∫ —Ç–µ–º –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ':")
        search_results = client.search_topics("–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", limit=5)
        print_topics(search_results)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º:")
        stats = client.get_stats()
        print(f"   üìä –í—Å–µ–≥–æ —Ç–µ–º: {stats['total_topics']}")
        print(f"   üìà –ü–æ –æ–±–ª–∞—Å—Ç—è–º: {stats['by_field']}")
        print(f"   üéì –ü–æ —É—Ä–æ–≤–Ω—è–º: {stats['by_level']}")
        print(f"   üìã –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º: {stats['by_status']}")
        
        print("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python -m src.api.server")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
