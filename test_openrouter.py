#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å OpenRouter API
"""

import os
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(str(Path(__file__).parent / "src"))

from src.agents import VKRTopicAgent, TopicGenerationConfig
from src.models import EducationLevel


async def test_openrouter_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º —Å OpenRouter"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º —Å OpenRouter")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á: export OPENROUTER_API_KEY=your_key_here")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å OpenRouter
        agent = VKRTopicAgent(model_name="openrouter:meta-llama/llama-3.1-8b-instruct:free")
        print("‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        print("\nüìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ...")
        topics = await agent.generate_topics_simple(
            field="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
            count=2,
            level=EducationLevel.BACHELOR
        )
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(topics)} —Ç–µ–º")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, topic in enumerate(topics, 1):
            print(f"\n{i}. {topic.title}")
            print(f"   –û–±–ª–∞—Å—Ç—å: {topic.field}")
            print(f"   –£—Ä–æ–≤–µ–Ω—å: {topic.level}")
            if topic.description:
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {topic.description[:100]}...")
            if topic.keywords:
                print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(topic.keywords)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def test_different_fields():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π"""
    print("\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –∑–Ω–∞–Ω–∏–π")
    print("=" * 50)
    
    agent = VKRTopicAgent()
    fields = ["–≠–∫–æ–Ω–æ–º–∏–∫–∞", "–ú–µ–¥–∏—Ü–∏–Ω–∞", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è"]
    
    for field in fields:
        try:
            print(f"\nüìñ {field}:")
            topics = await agent.generate_topics_simple(
                field=field,
                count=1,
                level=EducationLevel.BACHELOR
            )
            
            if topics:
                print(f"  ‚úÖ {topics[0].title}")
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—É")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")


async def test_api_server():
    """–¢–µ—Å—Ç API —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 50)
    
    try:
        import requests
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
            request_data = {
                "field": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
                "count": 1,
                "level": "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç"
            }
            
            response = requests.post(
                "http://localhost:8000/generate-topics",
                json=request_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ API –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {data['total_count']} —Ç–µ–º")
                if data['topics']:
                    print(f"   –ü—Ä–∏–º–µ—Ä: {data['topics'][0]['title']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python main.py")
            
    except ImportError:
        print("‚ùå requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install requests")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° OPENROUTER API")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("src").exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        return 1
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = asyncio.run(test_openrouter_generation())
    
    if success:
        print("\nüéâ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        asyncio.run(test_different_fields())
        asyncio.run(test_api_server())
        
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python main.py")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: http://localhost:8000/docs")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã: make test")
        
        return 0
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return 1


if __name__ == "__main__":
    sys.exit(main())
