"""
–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º –í–ö–†
"""

import requests
import json
import time
from typing import Dict, Any


class APITester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def test_health(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞...")
        
        try:
            response = self.session.get(f"{self.base_url}/health")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç: {data['status']}")
                print(f"   –ú–æ–¥–µ–ª—å: {data.get('model', 'N/A')}")
                return True
            else:
                print(f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def test_supported_fields(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π"""
        print("\nüìö –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π...")
        
        try:
            response = self.session.get(f"{self.base_url}/fields")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –û–±–ª–∞—Å—Ç–∏ –∑–Ω–∞–Ω–∏–π: {', '.join(data['fields'][:5])}...")
                print(f"   –£—Ä–æ–≤–Ω–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {', '.join(data['levels'])}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–µ–π: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_generate_topics(self, field: str = "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", count: int = 3) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º"""
        print(f"\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {count} —Ç–µ–º –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é '{field}'...")
        
        request_data = {
            "field": field,
            "count": count,
            "level": "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç",
            "include_trends": True,
            "include_methodology": True
        }
        
        try:
            start_time = time.time()
            response = self.session.post(f"{self.base_url}/generate-topics", json=request_data)
            end_time = time.time()
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {data['total_count']} —Ç–µ–º")
                print(f"   –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data['generation_time']:.2f}—Å")
                print(f"   –ú–æ–¥–µ–ª—å: {data['model_used']}")
                
                # –í—ã–≤–æ–¥–∏–º —Ç–µ–º—ã
                for i, topic in enumerate(data['topics'], 1):
                    print(f"\n   {i}. {topic['title']}")
                    if topic.get('description'):
                        print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {topic['description'][:100]}...")
                    if topic.get('keywords'):
                        print(f"      –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(topic['keywords'])}")
                
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return {}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {}
    
    def test_search_topics(self, query: str = "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ") -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ç–µ–º"""
        print(f"\nüîç –ü–æ–∏—Å–∫ —Ç–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'...")
        
        params = {
            "query": query,
            "limit": 5
        }
        
        try:
            response = self.session.get(f"{self.base_url}/topics", params=params)
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {data['total_count']} —Ç–µ–º")
                
                for i, topic in enumerate(data['topics'], 1):
                    print(f"   {i}. {topic['title']}")
                    print(f"      –û–±–ª–∞—Å—Ç—å: {topic['field']}, –£—Ä–æ–≤–µ–Ω—å: {topic['level']}")
                
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
                return {}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {}
    
    def test_get_stats(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        try:
            response = self.session.get(f"{self.base_url}/stats")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                print(f"   –í—Å–µ–≥–æ —Ç–µ–º: {data['total_topics']}")
                print(f"   –ü–æ –æ–±–ª–∞—Å—Ç—è–º: {data['by_field']}")
                print(f"   –ü–æ —É—Ä–æ–≤–Ω—è–º: {data['by_level']}")
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
                return {}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {}
    
    def test_error_handling(self) -> bool:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("\n‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        invalid_request = {
            "field": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
            "count": 25  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–º
        }
        
        try:
            response = self.session.post(f"{self.base_url}/generate-topics", json=invalid_request)
            if response.status_code == 422:
                print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                print(f"‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω –∫–æ–¥: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_performance(self, num_requests: int = 5) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print(f"\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ({num_requests} –∑–∞–ø—Ä–æ—Å–æ–≤)...")
        
        request_data = {
            "field": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
            "count": 1,
            "level": "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç"
        }
        
        times = []
        successful_requests = 0
        
        for i in range(num_requests):
            try:
                start_time = time.time()
                response = self.session.post(f"{self.base_url}/generate-topics", json=request_data)
                end_time = time.time()
                
                if response.status_code == 200:
                    successful_requests += 1
                    times.append(end_time - start_time)
                    print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: {times[-1]:.2f}—Å")
                else:
                    print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: –û—à–∏–±–∫–∞ {response.status_code}")
            except Exception as e:
                print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ {e}")
        
        if times:
            avg_time = sum(times) / len(times)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}/{num_requests}")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}—Å")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min(times):.2f}—Å")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max(times):.2f}—Å")
            return successful_requests >= num_requests * 0.8  # 80% —É—Å–ø–µ—à–Ω—ã—Ö
        else:
            print("‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
            return False
    
    def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –†–£–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –°–ï–†–í–ò–°–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–ï–ú –í–ö–†")
        print("=" * 60)
        
        tests = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è", self.test_health),
            ("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–±–ª–∞—Å—Ç–∏", self.test_supported_fields),
            ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º", lambda: self.test_generate_topics("–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", 2)),
            ("–ü–æ–∏—Å–∫ —Ç–µ–º", lambda: self.test_search_topics("–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")),
            ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", self.test_get_stats),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", self.test_error_handling),
            ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", lambda: self.test_performance(3))
        ]
        
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            print(f"\n{'='*40}")
            print(f"üî¨ {test_name}")
            print(f"{'='*40}")
            
            try:
                result = test_func()
                if result is not False and result is not None:
                    passed += 1
                    print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
                else:
                    print(f"‚ùå {test_name} - –ù–ï –ü–†–û–ô–î–ï–ù")
            except Exception as e:
                print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
        
        print(f"\n{'='*60}")
        print(f"üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
        print(f"{'='*60}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
        print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {total - passed}/{total}")
        
        if passed == total:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            return True
        else:
            print(f"\n‚ö†Ô∏è  {total - passed} –¢–ï–°–¢–û–í –ù–ï –ü–†–û–ô–î–ï–ù–´")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API")
    parser.add_argument("--url", default="http://localhost:8000", help="URL —Å–µ—Ä–≤–∏—Å–∞")
    parser.add_argument("--field", default="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", help="–û–±–ª–∞—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("--count", type=int, default=3, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    parser.add_argument("--query", default="–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", help="–ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")
    
    args = parser.parse_args()
    
    tester = APITester(args.url)
    
    print(f"üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: {args.url}")
    print(f"üìö –û–±–ª–∞—Å—Ç—å: {args.field}")
    print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º: {args.count}")
    print(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {args.query}")
    
    success = tester.run_all_tests()
    
    if success:
        print("\nüöÄ –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return 0
    else:
        print("\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")
        return 1


if __name__ == "__main__":
    import sys
    sys.exit(main())
