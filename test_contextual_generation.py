#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º –í–ö–†
"""

import requests
import json
import time

def test_contextual_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    print("üéØ –¢–ï–°–¢ –ö–û–ù–¢–ï–ö–°–¢–ù–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–ï–ú –í–ö–†")
    print("=" * 60)
    
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
    print("\n1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞...")
    
    student_preferences = {
        "interests": ["–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ", "–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏"],
        "skills": ["Python", "TensorFlow", "OpenCV", "SQL"],
        "career_goals": ["Data Scientist", "ML Engineer"],
        "preferred_technologies": ["Python", "TensorFlow", "PyTorch", "Docker"],
        "work_style": "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π",
        "complexity_preference": "—Å—Ä–µ–¥–Ω—è—è"
    }
    
    payload = {
        "field": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "level": "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç",
        "count": 2,
        "student_preferences": student_preferences
    }
    
    try:
        response = requests.post(
            f"{base_url}/generate-topics",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data['topics'])} —Ç–µ–º")
            
            for i, topic in enumerate(data['topics'], 1):
                print(f"\n   –¢–µ–º–∞ {i}: {topic['title']}")
                print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {topic['keywords']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∫–∞—Ñ–µ–¥—Ä—ã
    print("\n2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∫–∞—Ñ–µ–¥—Ä—ã...")
    
    department_context = {
        "existing_topics": [
            "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü",
            "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π",
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
        ],
        "research_directions": [
            "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            "–ë–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ",
            "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
        ],
        "available_resources": [
            "GPU –∫–ª–∞—Å—Ç–µ—Ä",
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
            "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
        ],
        "supervisor_expertise": [
            "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ",
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞",
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã"
        ]
    }
    
    payload = {
        "field": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "level": "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞",
        "count": 2,
        "department_context": department_context,
        "avoid_duplicates": True
    }
    
    try:
        response = requests.post(
            f"{base_url}/generate-topics",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data['topics'])} —Ç–µ–º")
            
            for i, topic in enumerate(data['topics'], 1):
                print(f"\n   –¢–µ–º–∞ {i}: {topic['title']}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {topic['description'][:100]}...")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    print("\n3. –ü–æ–ª–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è...")
    
    full_payload = {
        "field": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "level": "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç",
        "count": 1,
        "student_preferences": {
            "interests": ["–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"],
            "skills": ["JavaScript", "React", "Node.js"],
            "career_goals": ["Frontend Developer"],
            "preferred_technologies": ["React", "Vue.js", "TypeScript"],
            "work_style": "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π",
            "complexity_preference": "–ª–µ–≥–∫–∞—è"
        },
        "department_context": {
            "existing_topics": [
                "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞",
                "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã"
            ],
            "research_directions": ["–í–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "UX/UI –¥–∏–∑–∞–π–Ω"],
            "available_resources": ["–°–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏", "–î–∏–∑–∞–π–Ω-—Å—Ç—É–¥–∏—è"]
        },
        "avoid_duplicates": True
    }
    
    try:
        start_time = time.time()
        response = requests.post(
            f"{base_url}/generate-topics",
            json=full_payload,
            headers={"Content-Type": "application/json"}
        )
        end_time = time.time()
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data['topics'])} —Ç–µ–º –∑–∞ {end_time - start_time:.2f}—Å")
            
            for i, topic in enumerate(data['topics'], 1):
                print(f"\n   –¢–µ–º–∞ {i}: {topic['title']}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {topic['description']}")
                print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {topic['keywords']}")
                print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {topic.get('difficulty_level', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


if __name__ == "__main__":
    test_contextual_generation()
