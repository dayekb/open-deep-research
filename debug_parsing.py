#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
"""

import os
import asyncio
import sys
from pathlib import Path
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(str(Path(__file__).parent / "src"))

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv(override=True)

from src.agents.vkr_topic_agent import VKRTopicAgent
from src.models import EducationLevel


async def debug_parsing():
    """–û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("üîç –û–¢–õ–ê–î–ö–ê –ü–ê–†–°–ò–ù–ì–ê –û–¢–í–ï–¢–ê –ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    agent = VKRTopicAgent()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º
    field = "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"
    level = EducationLevel.BACHELOR
    count = 1
    
    prompt = f"""–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {count} —Ç–µ–º—É –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é "{field}" –¥–ª—è —É—Ä–æ–≤–Ω—è "{level.value}".

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –¢–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π
- –ü–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª—è —É—Ä–æ–≤–Ω—è {level.value}
- –°–≤—è–∑–∞–Ω–Ω–æ–π —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º {field}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (JSON):
{{
  "topics": [
    {{
      "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã",
      "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã",
      "keywords": ["–∫–ª—é—á–µ–≤–æ–µ", "—Å–ª–æ–≤–æ1", "—Å–ª–æ–≤–æ2"],
      "difficulty": "–õ–µ–≥–∫–∞—è/–°—Ä–µ–¥–Ω—è—è/–°–ª–æ–∂–Ω–∞—è"
    }}
  ]
}}

–û—Ç–≤–µ—Ç:"""
    
    print("–ü—Ä–æ–º–ø—Ç:")
    print(prompt)
    print("\n" + "="*50)
    
    try:
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏...")
        response = await agent.llm.ainvoke(prompt)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏:")
        print(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response.content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–û—Ç–≤–µ—Ç:\n{response.content}")
        
        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç
        print("\n" + "="*50)
        print("–ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        
        # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
        content = response.content
        
        # –ò—â–µ–º –±–ª–æ–∫ JSON
        start_idx = content.find('{')
        end_idx = content.rfind('}') + 1
        
        if start_idx != -1 and end_idx > start_idx:
            json_str = content[start_idx:end_idx]
            print(f"–ù–∞–π–¥–µ–Ω JSON: {json_str}")
            
            import json
            try:
                data = json.loads(json_str)
                print(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω!")
                print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º: {len(data.get('topics', []))}")
                
                for i, topic in enumerate(data.get('topics', []), 1):
                    print(f"\n–¢–µ–º–∞ {i}:")
                    print(f"  –ó–∞–≥–æ–ª–æ–≤–æ–∫: {topic.get('title', '–ù–µ—Ç')}")
                    print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {topic.get('description', '–ù–µ—Ç')}")
                    print(f"  –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {topic.get('keywords', [])}")
                    print(f"  –°–ª–æ–∂–Ω–æ—Å—Ç—å: {topic.get('difficulty', '–ù–µ—Ç')}")
                    
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        else:
            print("‚ùå JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(debug_parsing())
